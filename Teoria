-- Maps

// Declaración de un Map (un HashMap) con clave "Integer" y Valor "String". Las claves pueden ser de cualquier tipo de objetos, aunque los más utilizados como clave son los objetos predefinidos de Java como String, Integer, Double ... !!!!CUIDADO los Map no permiten datos atómicos
Map<Integer, String> nombreMap = new HashMap<Integer, String>();
nombreMap.size(); // Devuelve el numero de elementos del Map
nombreMap.isEmpty(); // Devuelve true si no hay elementos en el Map y false si si los hay
nombreMap.put(K clave, V valor); // Añade un elemento al Map
nombreMap.get(K clave); // Devuelve el valor de la clave que se le pasa como parámetro o 'null' si la clave no existe
nombreMap.clear(); // Borra todos los componentes del Map
nombreMap.remove(K clave); // Borra el par clave/valor de la clave que se le pasa como parámetro
nombreMap.containsKey(K clave); // Devuelve true si en el map hay una clave que coincide con K
nombreMap.containsValue(V valor); // Devuelve true si en el map hay un Valor que coincide con V
nombreMap.values(); // Devuelve una "Collection" con los valores del Map


-- List (Aceptan duplicados)
  ArrayList  Equals
  LinkedList  Equals
  
-- Set (No aceptan duplicados)
  HashSet (Reescribir el HashCode y Equals)
  TreeSet (Sobreescribir Comparable --> metodo compareTo)


arraylist.contains(objeto) --> sobreescribir equals
removeAll();
clear();
get();
size();
add();
---------

si necesitas saber que tipo de objetos hay en un array se puede u tilizar el INSTANCEOF ,
que es para preguntar dentro de un for. 
Ejemplo ->. figura[1] instanceof circulo, ahi preguntas si esa figura es un circulo

instanceOF 

 foreach
  figura[1] instanceOF circulo
  
--------

Cuando en poliformismo queres acceder a un metodo de una clase hija, si o si tenes que castearlo
porque en memoria estan cargado. ejemplo de figura-> circulo: ((circulo)figura).getMetodoHijo();



---------

interfaz no tiene implementacion, solamente guarda el contrato del metodo(firma) que obliga a las clases que implementen dicha interfaz
a reescribir el metodo



